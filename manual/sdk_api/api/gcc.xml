<?xml version="1.0"?>
<doc>
<assembly>
<name>
gcc
</name>
</assembly>
<members>
<member name="T:gcc.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:gcc.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:gcc.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:gcc.ProteinDomain">
 <summary>
 利用Smart程序分析目标蛋白质结构域，方便进行信号传导网络的重建工作
 </summary>
 <remarks></remarks>
</member>
<member name="M:gcc.ProteinDomain.SMART(System.String,System.String,System.String)">
 <summary>
 以Pfam数据库为准
 </summary>
 <param name="TargetFile">目标蛋白质序列数据库</param>
 <param name="ExportSaved">保存的结果数据CSV文件的文件路径</param>
 <remarks></remarks>
</member>
<member name="M:gcc.ProteinDomain.Extend.Invoke(gcc.ProteinDomain.Rule,System.Collections.Generic.Dictionary{System.String,System.String[]})">
 <summary>
 假设Domain没有发生变化被反应掉，其仅是被修饰了整个展开过程为一个递归的过程
 </summary>
 <param name="Rule"></param>
 <param name="DomainDistributionList"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:gcc.ProteinDomain.GetList(gcc.ProteinDomain.Rule[],Microsoft.VisualBasic.Data.csv.DocumentStream.File)">
 <summary>
 
 </summary>
 <returns>{DomainId, Protein-UniqueId()}</returns>
 <remarks></remarks>
</member>
<member name="P:gcc.ProteinDomain.Rule.Refx.DomainModify">
 <summary>
 结构域修饰
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="F:gcc.ProteinDomain.Rule.Refx.RelatedIndex">
 <summary>
 假若目标为一个结构域的话，则本属性为左端的结构域在右端所对应的位置
 </summary>
 <remarks></remarks>
</member>
<member name="M:gcc.ProteinDomain.Rule.GetDomains">
 <summary>
 获取本条规则中的所有的涉及到的结构域Id集合
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:gcc.CLI.CompileMetaCyc(Microsoft.VisualBasic.CommandLine.CommandLine)">
 <summary>
 Compile a metacyc database into a gcml model file.(将一个MetaCyc数据库编译为gcml计算机模型文件)
 </summary>
 <param name="CommandLine"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:gcc.CLI.AddRule(Microsoft.VisualBasic.CommandLine.CommandLine)">
 <summary>
 向一个编译好的计算机模型文件之中添加相互作用规则
 </summary>
 <param name="CommandLine"></param>
 <returns></returns>
 <remarks>
 由于规则是按照结构域来标识的，故而，首先需要进行结构域的分析
 之后将结构域拓展为具体的目标蛋白质
 最后将拓展的新反应规则添加进入计算机模型之中
 </remarks>
</member>
<member name="T:gcc.Program">
 <summary>
 GCModeller模型文件编译工具，主要的工作为将一个MetaCyc数据库编译为一个GCML模型文件，以及根据建模项目文件编译模型文件
 </summary>
 <remarks>
 </remarks>
</member>
<member name="P:gcc.Settings.File.BlastBin">
 <summary>
 Blast程序组所在的文件夹
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:gcc.Settings.File.R_HOME">
 <summary>
 The R program install location on your computer. This property value is the directory path value like: D:\R\bin or C:\Program Files\R\bin
 </summary>
 <returns></returns>
</member>
<member name="P:gcc.Settings.File.RepositoryRoot">
 <summary>
 The root directory for stores the GCModeller database such as fasta sequence for annotation.
 </summary>
 <returns></returns>
</member>
<member name="P:gcc.Settings.File.Perl">
 <summary>
 External hybrid programming with bio-perl.
 </summary>
 <returns></returns>
</member>
<member name="P:gcc.Settings.File.ShoalShell">
 <summary>
 有一些时候需要进行批量计算的时候，可能会在程序的内部释放出脚本重新调用Shoal进行计算
 </summary>
 <returns></returns>
</member>
<member name="P:gcc.Settings.File.MySQL">
 <summary>
 Connection paramenter to the model data server.
 (连接至存放模型数据的服务器的MySQL连接参数)
 </summary>
 <remarks></remarks>
</member>
<member name="P:gcc.Settings.Programs.GCHOST.SDK">
 <summary>
 
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:gcc.Settings.Programs.IDE.Languages">
 <summary>
 Enum the mainly used language.
 </summary>
 <remarks></remarks>
</member>
<member name="F:gcc.Settings.Programs.IDE.Languages.System">
 <summary>
 Following the system default language.
 </summary>
 <remarks></remarks>
</member>
<member name="F:gcc.Settings.Programs.IDE.Languages.ZhCN">
 <summary>
 Language in Chinese simplify.
 (简体中文) 
 </summary>
 <remarks></remarks>
</member>
<member name="F:gcc.Settings.Programs.IDE.Languages.EnUS">
 <summary>
 Language in English.
 (英语语言)
 </summary>
 <remarks></remarks>
</member>
<member name="F:gcc.Settings.Programs.IDE.Languages.FrFR">
 <summary>
 Language in french.
 (法语语言)
 </summary>
 <remarks></remarks>
</member>
<member name="P:gcc.Settings.Programs.SMART.CDD">
 <summary>
 CDD数据库的数据文件夹的路径
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:gcc.Settings.Session">
 <summary>
 GCModeller program profile session.(GCModeller的应用程序配置会话) 
 </summary>
 <remarks></remarks>
 
</member>
<member name="P:gcc.Settings.Session.TEMP">
 <summary>
 Temp data directory for this application session.(本应用程序会话的临时数据文件夹)
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:gcc.Settings.Session.Templates">
 <summary>
 Templates directory of the GCModeller inputs data.
 (在这个文件夹里面存放的是一些分析工具的输入的数据的模板文件)
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:gcc.Settings.Session.DataCache">
 <summary>
 The cache data directory for this application session.(本应用程序的数据缓存文件夹)
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:gcc.Settings.Session.Initialized">
 <summary>
 This property indicates that whether this application session is initialized or not.(应用程序是否已经初始化完毕)
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="F:gcc.Settings.Session._LogDir">
 <summary>
 Directory for stores the application log file.(存放应用程序的日志文件的文件系统目录)
 </summary>
 <remarks></remarks>
</member>
<member name="P:gcc.Settings.Session.LogDIR">
 <summary>
 Directory for stores the application log file.(存放应用程序的日志文件的文件系统目录)
 </summary>
 <remarks></remarks>
</member>
<member name="P:gcc.Settings.Session.SettingsDIR">
 <summary>
 Data storage directory for the program settings.(配置文件所存放的文件夹)
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:gcc.Settings.Session.Initialize(System.Type)">
 <summary>
 Initialize the application session and get the program profile data.(初始化应用程序会话，并获取应用程序的配置数据)
 </summary>
 <returns></returns>
 <remarks></remarks>
 
</member>
<member name="M:gcc.Settings.Session.TryGetShoalShellBin">
 <summary>
 首先尝试通过配置文件得到脚本环境，假若没有配置这个值，则会尝试通过本身程序来测试，因为这个函数的调用可能是来自于Shoal脚本的
 </summary>
 <returns></returns>
</member>
<member name="M:gcc.Settings.Session.Finallize">
 <summary>
 Close the application session and save the settings file.
 </summary>
 <remarks></remarks>
 
</member>
<member name="M:gcc.Settings.Session.FolkShoalThread(System.String,System.String)">
 <summary>
 For unawareless of overrides the original data file, this function will automatcly add a .std_out extension to the STDOUT filepath.
 (新构建一个Shoal实例运行一个分支脚本任务，在.NET之中线程的效率要比进程的效率要低，使用这种多线程的方法来实现并行的效率要高很多？？？？)
 </summary>
 <param name="Script">脚本文件的文件文本内容</param>
 <param name="STDOUT">Standard output redirect to this file. Facility the GCModeller debugging.</param>
 <returns></returns>
 
</member>
<member name="T:gcc.GCModeller.FileSystem.FileSystem">
 <summary>
 
 </summary>
 <remarks>由于可能会修改参数然后在调用的这种情况出现，所以这里的数据可能需要实时更新，所以不再使用属性的简写形式了</remarks>
 
</member>
<member name="M:gcc.GCModeller.FileSystem.FileSystem.TryGetSource(System.String,System.Func{System.String})">
 <summary>
 这个是为了加载数据而构建的，故而假若数据源不存在的话就会返回备用的
 </summary>
 <param name="source"></param>
 <param name="alt"></param>
 <returns></returns>
</member>
<member name="P:gcc.GCModeller.FileSystem.FileSystem.RepositoryRoot">
 <summary>
 The root directory for stores the GCModeller database such as fasta sequence for annotation.
 </summary>
 <returns></returns>
</member>
<member name="P:gcc.GCModeller.FileSystem.FileSystem.RegpreciseRoot">
 <summary>
 &lt;RepositoryRoot>/Regprecise/
 </summary>
 <returns></returns>
</member>
<member name="P:gcc.GCModeller.FileSystem.FileSystem.MotifLDM">
 <summary>
 &lt;RegpreciseRoot>/MEME/MAST_LDM/
 </summary>
 <returns></returns>
</member>
<member name="P:gcc.GCModeller.FileSystem.FileSystem.Regulations">
 <summary>
 regulations.xml文件在GCModeller数据库之中的位置
 </summary>
 <returns></returns>
</member>
<member name="P:gcc.GCModeller.FileSystem.FileSystem.IsNullOrEmpty">
 <summary>
 配置文件之中是否包含有GCModeller数据库的位置的路径参数
 </summary>
 <returns></returns>
</member>
<member name="P:gcc.GCModeller.FileSystem.FileSystem.KEGGFamilies">
 <summary>
 Regprecise数据库之中的调控因子蛋白质的摘要Dump信息
 </summary>
 <returns></returns>
</member>
<member name="P:gcc.GCModeller.FileSystem.FileSystem.CDD">
 <summary>
 NCBI CDD数据库的文件夹位置
 </summary>
 <returns></returns>
</member>
<member name="M:gcc.GCModeller.FileSystem.FileSystem.GetRepositoryRoot">
 <summary>
 The root directory for stores the GCModeller database such as fasta sequence for annotation.
 </summary>
 <returns></returns>
 
</member>
<member name="M:gcc.GCModeller.FileSystem.FileSystem.GetMotifLDM">
 <summary>
 &lt;RegpreciseRoot>/MEME/MAST_LDM/
 </summary>
 <returns></returns>
</member>
<member name="M:gcc.GCModeller.FileSystem.FileSystem.GetMotifLDM(System.String)">
 <summary>
 &lt;RegpreciseRoot>/MEME/MAST_LDM/
 </summary>
 <returns></returns>
</member>
<member name="M:gcc.GCModeller.FileSystem.FileSystem.GetRegulations">
 <summary>
 regulations.xml文件在GCModeller数据库之中的位置
 </summary>
 <returns></returns>
 
</member>
<member name="M:gcc.GCModeller.FileSystem.FileSystem.IsRepositoryNullOrEmpty">
 <summary>
 配置文件之中是否包含有GCModeller数据库的位置的路径参数
 </summary>
 <returns></returns>
 
</member>
<member name="M:gcc.GCModeller.FileSystem.FileSystem.GetPfamDb(System.String)">
 <summary>
 默认返回NCBI CDD数据库之中的Pfam数据库
 </summary>
 <param name="name"></param>
 <returns></returns>
</member>
<member name="M:gcc.GCModeller.FileSystem.FileSystem.GetLocalblast">
 <summary>
 This function will search for the blast+ bin directory automatically based on the 
 registry, config data and system directories.
 (会自动搜索注册表，配置文件和文件系统之上的目录，实在找不到会返回空字符串并且记录下错误)
 </summary>
 <returns></returns>
 
</member>
<member name="M:gcc.GCModeller.FileSystem.KEGG.Directories.GetReactions">
 <summary>
 /KEGG/Reactions/
 </summary>
 <returns></returns>
 
</member>
<member name="P:gcc.GCModeller.FileSystem.RegPrecise.Directories.Motif_PWM">
 <summary>
 Directory of  /Regprecise/MEME/Motif_PWM/
 </summary>
 <returns></returns>
</member>
<member name="P:gcc.GCModeller.FileSystem.RegPrecise.Directories.RegPreciseRegulations">
 <summary>
 <see cref="M:gcc.GCModeller.FileSystem.FileSystem.GetRepositoryRoot"/> &amp; "/Regprecise/RegPrecise.Xml"
 </summary>
 <returns></returns>
</member>
</members>
</doc>
