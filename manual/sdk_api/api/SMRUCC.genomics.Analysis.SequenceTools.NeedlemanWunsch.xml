<?xml version="1.0"?>
<doc>
<assembly>
<name>
SMRUCC.genomics.Analysis.SequenceTools.NeedlemanWunsch
</name>
</assembly>
<members>
<member name="T:SMRUCC.genomics.Analysis.SequenceTools.GapPenalty">
 <summary>
 Class to implement linear and affine gap penalties
 Bioinformatics 1, WS 15/16
 Jonas Ditz and Benjamin Schroeder
 </summary>
</member>
<member name="P:SMRUCC.genomics.Analysis.SequenceTools.GapPenalty.GapOpening">
 <summary>
 get gap opening cost </summary>
 <returns> gapOpening </returns>
</member>
<member name="P:SMRUCC.genomics.Analysis.SequenceTools.GapPenalty.GapExtension">
 <summary>
 get gap extension cost </summary>
 <returns> gapExtension </returns>
</member>
<member name="P:SMRUCC.genomics.Analysis.SequenceTools.GapPenalty.PenaltyTyp">
 <summary>
 get gap penalty typ </summary>
 <returns> 0 if linear, 1 else </returns>
</member>
<member name="M:SMRUCC.genomics.Analysis.SequenceTools.GapPenalty.getGapCost(System.Boolean)">
 <summary>
 get gap cost for currend gap </summary>
 <param name="gapOpen"> </param>
 <returns> gapCost </returns>
</member>
<member name="T:SMRUCC.genomics.Analysis.SequenceTools.NeedlemanWunsch`1">
 <summary>
 Needleman-Wunsch Algorithm
 Bioinformatics 1, WS 15/16
 Dr. Kay Nieselt and Alexander Seitz
 </summary>
</member>
<member name="M:SMRUCC.genomics.Analysis.SequenceTools.NeedlemanWunsch`1.traceback(System.Collections.Generic.Stack{`0},System.Collections.Generic.Stack{`0},System.Int32,System.Int32)">
 <summary>
	this function is called for the first time with two empty stacks
	and the end indices of the matrix
	
	the function computes a traceback over the matrix, it calls itself recursively
	for each sequence, it pushes the aligned character (a,c,g,t or -)
	on a stack (use java.util.Stack with the function push()) 
 </summary>
 <param name="s1"></param>
 <param name="s2"></param>
 <param name="i"></param>
 <param name="j"></param>
</member>
<member name="M:SMRUCC.genomics.Analysis.SequenceTools.NeedlemanWunsch`1.compute">
 <summary>
 computes the matrix for the Needleman-Wunsch Algorithm
 </summary>
 <remarks>	
 this function computes the NW-algorithm with linear gap-costs
  - first make yourself familiar with this function and the functions used to compute the resulting alignment!
  
  - modify the functions used in this class such that the NW algorithm is modular
    i.e. the following criteria should be fulfilled: 
        - it should be easy to replace the linear gap cost function with an affine gap cost function
        - the initialization step, fill and traceback should be modular, to allow
          to switch between different algorithms later (NW, SW, OverlapAlignment etc.)
    
  - you are allowed to change the class structure, if you think that it is necessary!
    (make sure to use object oriented programming concepts, i.e. use objects to abstract your code 
   	-> don't do everything in a single class)    	 
 </remarks>
</member>
<member name="M:SMRUCC.genomics.Analysis.SequenceTools.NeedlemanWunsch`1.fillTracebackMatrix(System.Int32,System.Int32,System.Int32)">
 <summary>
 return the maximizing cell(s)
 1 , if the maximizing cell is the upper cell
 2 , if the maximizing cell is the left-upper cell
 4 , if the maximizing cell is the left cell
 if there are more than one maximizing cells, the values are summed up
 </summary>
 <param name="upperLeft"> </param>
 <param name="left"> </param>
 <param name="upper"> </param>
 <returns> code for the maximizing cell(s) </returns>
</member>
<member name="M:SMRUCC.genomics.Analysis.SequenceTools.NeedlemanWunsch`1.writeAlignment(System.String,System.Boolean)">
 <summary>
 This funktion provide a easy way to write a computed alignment into a fasta file </summary>
 <param name="outFile"> </param>
 <param name="single"> </param>
</member>
<member name="T:SMRUCC.genomics.Analysis.SequenceTools.NeedlemanWunschArguments`1">
 <summary>
 Base class for the Needleman-Wunsch Algorithm
 Bioinformatics 1, WS 15/16
 Dr. Kay Nieselt and Alexander Seitz
 </summary>
</member>
<member name="P:SMRUCC.genomics.Analysis.SequenceTools.NeedlemanWunschArguments`1.NumberOfAlignments">
 <summary>
 get numberOfAlignments </summary>
 <returns> numberOfAlignments </returns>
</member>
<member name="P:SMRUCC.genomics.Analysis.SequenceTools.NeedlemanWunschArguments`1.GapPenalty">
 <summary>
 get gap open penalty </summary>
 <returns> gap open penalty </returns>
</member>
<member name="P:SMRUCC.genomics.Analysis.SequenceTools.NeedlemanWunschArguments`1.MatchScore">
 <summary>
 get match score </summary>
 <returns> match score </returns>
</member>
<member name="P:SMRUCC.genomics.Analysis.SequenceTools.NeedlemanWunschArguments`1.MismatchScore">
 <summary>
 get mismatch score </summary>
 <returns> mismatch score </returns>
</member>
<member name="F:SMRUCC.genomics.Analysis.SequenceTools.NeedlemanWunschArguments`1.Sequence1">
 <summary>
 get sequence 1 </summary>
 <return>  sequence 1 </return>
</member>
<member name="F:SMRUCC.genomics.Analysis.SequenceTools.NeedlemanWunschArguments`1.Sequence2">
 <summary>
 get sequence 2cted int max (int a, int b, int c) {
    return Math.max(a, Math.max(b, c)); </summary>
 <return> sequence 2 </return>
</member>
<member name="M:SMRUCC.genomics.Analysis.SequenceTools.NeedlemanWunschArguments`1.getAligned1(System.Int32)">
 <summary>
 get aligned version of sequence 1 </summary>
 <param name="i"> </param>
 <returns>  aligned sequence 1 </returns>
</member>
<member name="M:SMRUCC.genomics.Analysis.SequenceTools.NeedlemanWunschArguments`1.addAligned1(`0[])">
 <summary>
 set aligned sequence 1 </summary>
 <param name="aligned1"> </param>
</member>
<member name="M:SMRUCC.genomics.Analysis.SequenceTools.NeedlemanWunschArguments`1.getAligned2(System.Int32)">
 <summary>
 get aligned version of sequence 2 </summary>
 <param name="i"> </param>
 <returns> aligned sequence 2 </returns>
</member>
<member name="M:SMRUCC.genomics.Analysis.SequenceTools.NeedlemanWunschArguments`1.addAligned2(`0[])">
 <summary>
 set aligned sequence 2 </summary>
 <param name="aligned2"> </param>
</member>
<member name="P:SMRUCC.genomics.Analysis.SequenceTools.NeedlemanWunschArguments`1.Score">
 <summary>
 get computed score </summary>
 <returns> score </returns>
</member>
<member name="M:SMRUCC.genomics.Analysis.SequenceTools.NeedlemanWunschArguments`1.match(`0,`0)">
 <summary>
 if char a is equal to char b
 return the match score
 else return mismatch score
 </summary>
</member>
<member name="T:SMRUCC.genomics.Analysis.SequenceTools.RunNeedlemanWunsch">
 <summary>
 Application of the ``Needleman-Wunsch Algorithm``
 Bioinformatics 1, WS 15/16
 Dr. Kay Nieselt and Alexander Seitz
 
 * Benjamin Schroeder
 * Jonas Ditz
 </summary>
</member>
<member name="M:SMRUCC.genomics.Analysis.SequenceTools.RunNeedlemanWunsch.RunAlign(SMRUCC.genomics.SequenceModel.FASTA.FastaToken,SMRUCC.genomics.SequenceModel.FASTA.FastaToken,System.Boolean,System.String)">
 <summary>
 Run the Needleman-Wunsch Algorithm </summary>
 <param name="fasta1"> commandline arguments </param>
 <exception cref="T:System.Exception"> </exception>
</member>
</members>
</doc>
