<?xml version="1.0"?>
<doc>
<assembly>
<name>
SMRUCC.genomics.SequenceModel.RNA-seq.Data
</name>
</assembly>
<members>
<member name="T:SMRUCC.genomics.SequenceModel.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:SMRUCC.genomics.SequenceModel.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:SMRUCC.genomics.SequenceModel.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="M:SMRUCC.genomics.SequenceModel.Contig.AssemblingForward(System.Collections.Generic.List{SMRUCC.genomics.SequenceModel.SAM.AlignmentReads},System.Boolean)">
 <summary>
 所装配出来的位置和方向有关
 </summary>
 <param name="Reads"></param>
 <param name="Reversed">实际的方向</param>
 <returns></returns>
</member>
<member name="M:SMRUCC.genomics.SequenceModel.Contig.AssemblingReversed(System.Collections.Generic.List{SMRUCC.genomics.SequenceModel.SAM.AlignmentReads},System.Boolean)">
 <summary>
 不明白在bitwiseFLAG里面已经标注了Reverse方向了，为什么还是有些Reads会是正向的
 bwa标注出来的位置和ncbi上面的blast的位置好像不一致？？？
 </summary>
 <param name="Reads">位置从大到小的</param>
 <returns></returns>
</member>
<member name="T:SMRUCC.genomics.SequenceModel.Fastaq.FastQIdentifier">
 <summary>
 Illumina sequence identifiers
 </summary>
 <remarks></remarks>
</member>
<member name="P:SMRUCC.genomics.SequenceModel.Fastaq.FastQIdentifier.Identifier">
 <summary>
 The unique instrument name
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:SMRUCC.genomics.SequenceModel.Fastaq.FastQIdentifier.FlowCellLane">
 <summary>
 Flowcell lane
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:SMRUCC.genomics.SequenceModel.Fastaq.FastQIdentifier.Tiles">
 <summary>
 Tile number within the flowcell lane
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:SMRUCC.genomics.SequenceModel.Fastaq.FastQIdentifier.X">
 <summary>
 'x'-coordinate of the cluster within the tile
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:SMRUCC.genomics.SequenceModel.Fastaq.FastQIdentifier.Y">
 <summary>
 'y'-coordinate of the cluster within the tile
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:SMRUCC.genomics.SequenceModel.Fastaq.FastQIdentifier.MsIndex">
 <summary>
 Index number for a multiplexed sample (0 for no indexing)
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:SMRUCC.genomics.SequenceModel.Fastaq.FastQIdentifier.PairMember">
 <summary>
 The member of a pair, /1 or /2 (paired-end or mate-pair reads only)
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:SMRUCC.genomics.SequenceModel.Fastaq.FastQIdentifier.IDParser(System.String)">
 <summary>
 @HWUSI-EAS100R:6:73:941:1973#0/1
 </summary>
 <param name="str"></param>
 <returns></returns>
 <example>@FCC00ACABXX:8:1101:1333:1980#TTAGGCAT/1</example>
</member>
<member name="M:SMRUCC.genomics.SequenceModel.Fastaq.Stream.AsReadsNode(SMRUCC.genomics.SequenceModel.Fastaq.FastQ)">
 <summary>
 将<see cref="T:SMRUCC.genomics.SequenceModel.Fastaq.FastQ"/>对象重新生成fq文件之中的一条reads数据
 </summary>
 <param name="fq"></param>
 <returns></returns>
</member>
<member name="T:SMRUCC.genomics.SequenceModel.Fastaq.FastQ">
 <summary>
 FASTQ format is a text-based format for storing both a biological sequence (usually nucleotide sequence) and 
 its corresponding quality scores. Both the sequence letter and quality score are each encoded with a single 
 ASCII character for brevity. It was originally developed at the Wellcome Trust Sanger Institute to bundle a 
 FASTA sequence and its quality data, but has recently become the de facto standard for storing the output of 
 high-throughput sequencing instruments such as the Illumina Genome Analyzer.
 
 There is no standard file extension for a FASTQ file, but .fq and .fastq, are commonly used.
 (http://en.wikipedia.org/wiki/FASTQ_format)
 </summary>
 <remarks>
 A FASTQ file normally uses four lines per sequence.
 
 + Line 1 begins with a '@' character and is followed by a sequence identifier and an optional description (like a FASTA title line).
 + Line 2 is the raw sequence letters.
 + Line 3 begins with a '+' character and is optionally followed by the same sequence identifier (and any description) again.
 + Line 4 encodes the quality values for the sequence in Line 2, and must contain the same number of symbols as letters in the sequence.
 
 > + header
 > + seuqnece
 > + ``+``
 > + quality
 
 一条FastQ序列文件通常使用4行代表一条序列数据：
 + 第一行： 起始于@字符，后面跟随着序列的标识符，以及一段可选的摘要描述信息
 + 第二行： 原始的序列
 + 第三行： 起始于+符号，与第一行的作用类似
 + 第四行： 编码了第二行的序列数据的质量高低，长度与第二行相同
 </remarks>
</member>
<member name="P:SMRUCC.genomics.SequenceModel.Fastaq.FastQ.Title">
 <summary>
 第一行的摘要描述信息
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:SMRUCC.genomics.SequenceModel.Fastaq.FastQ.SEQ_ID">
 <summary>
 第一行的序列标识符
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="F:SMRUCC.genomics.SequenceModel.Fastaq.FastQ.QUANTITY_ORDERS">
 <summary>
 The character '!' represents the lowest quality while '~' is the highest. Here are the quality value characters in left-to-right increasing order of quality (ASCII):
 </summary>
 <remarks></remarks>
</member>
<member name="M:SMRUCC.genomics.SequenceModel.Fastaq.FastQ.FastaqParser(System.String[])">
 <summary>
 
 </summary>
 <param name="str"></param>
 <returns></returns>
 <remarks>
 The original Sanger FASTQ files also allowed the sequence and quality strings to be wrapped (split over multiple lines), 
 but this is generally discouraged as it can make parsing complicated due to the unfortunate choice of "@" and "+" as 
 markers (these characters can also occur in the quality string).[2] An example of a tools that break the 4 line convention 
 is vcfutils.pl from samtools.[3]
 </remarks>
</member>
<member name="T:SMRUCC.genomics.SequenceModel.Fastaq.FastQFile">
 <summary>
 There is no standard file extension for a FASTQ file, but .fq and .fastq, are commonly used.
 </summary>
 <remarks></remarks>
</member>
<member name="M:SMRUCC.genomics.SequenceModel.Fastaq.FastQFile.Load(System.String,Microsoft.VisualBasic.Text.Encodings)">
 <summary>
 Load the fastq data from a specific file handle.(从一个特定的文件句柄之中加载fastq文件的数据)
 </summary>
 <param name="path">The file handle of the fastq data.</param>
 <returns></returns>
</member>
<member name="M:SMRUCC.genomics.SequenceModel.Fastaq.FastQFile.ToFasta(System.Boolean)">
 <summary>
 Convert fastaq data into a fasta data file.
 </summary>
 <returns></returns>
</member>
<member name="T:SMRUCC.genomics.SequenceModel.SAM.AlignmentReads">
 <summary>
 比对区域
 
 Each alignment line has 11 mandatory fields. These fields always appear in the same order and must
 be present, but their values can be '0' or '*' (depending on the field) if the corresponding information
 is unavailable. 
 
 The following table gives an overview of the mandatory fields in the SAM format:
 
 Col  Field  Type    Regexp/Range                Brief description
   1  QNAME  String  [!-?A-~]{1,255}             Query template NAME
   2  FLAG   Int     [0,216-1]                   bitwise FLAG
   3  RNAME  String  \*|[!-()+-&lt;>-~][!-~]*    Reference sequence NAME
   4  POS    Int     [0,229-1]                   1-based leftmost mapping POSition
   5  MAPQ   Int     [0,28-1]                    MAPping Quality
   6  CIGAR  String  \*|([0-9]+[MIDNSHPX=])+     CIGAR string
   7  RNEXT  String  \*|=|[!-()+-&lt;>-~][!-~]*  Ref. name of the mate/next segment
   8  PNEXT  Int     [0,229-1]                   Position of the mate/next segment
   9  TLEN   Int     [-229+1,229-1]              observed Template LENgth
  10  SEQ    String  \*|[A-Za-z=.]+              segment SEQuence
  11  QUAL   String  [!-~]+                      ASCII of Phred-scaled base QUALity+33
 </summary>
 <remarks></remarks>
</member>
<member name="P:SMRUCC.genomics.SequenceModel.SAM.AlignmentReads.QNAME">
 <summary>
 Query template NAME.(Query template NAME. Reads/segments having identical QNAME are regarded to
 come from the same template. A QNAME '*' indicates the information is unavailable.)
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:SMRUCC.genomics.SequenceModel.SAM.AlignmentReads.FLAG">
 <summary>
 bitwise FLAG
 
 bitwise FLAG. Each bit is explained in the following table:
 
   Bit    Description
   0x1    template having multiple segments in sequencing
   0x2    each segment properly aligned according to the aligner
   0x4    segment unmapped
   0x8    next segment in the template unmapped
  0x10    SEQ being reverse complemented
  0x20    SEQ of the next segment in the template being reversed
  0x40    the first segment in the template
  0x80    the last segment in the template
 0x100    secondary alignment
 0x200    Not passing quality controls
 0x400    PCR Or optical duplicate
 
 Bit 0x4 Is the only reliable place to tell whether the segment Is unmapped. If 0x4 Is set, 
 no assumptions can be made about RNAME, POS, CIGAR, MAPQ, bits 0x2, 0x10 And 0x100 And the 
 bit 0x20 of the next segment in the template.
 
 If 0x40 And 0x80 are both set, the segment Is part of a linear template, but it Is neither 
 the first nor the last segment. If both 0x40 And 0x80 are unset, the index of the segment 
 in the template Is unknown. This may happen For a non-linear template Or the index Is lost 
 in data processing.
 
 Bit 0x100 marks the alignment Not to be used in certain analyses when the tools in use are aware of this bit.
 If 0x1 Is unset, no assumptions can be made about 0x2, 0x8, 0x20, 0x40 And 0x80.
 </summary>
 <value></value>
 <returns></returns>
 <remarks>
 可以从这个参数之中了解Reads的方向
 
 Sequence reads are always from 5' to 3', but the forward and reversed reactions are running along the opposite strands. 
 The 2 complementary DNA strands are oriented in opposite orientation, and sequence reads from either end are generating 
 results of those 2 different strands. See this page here - it shows DNA replication, but that follows the same logic 
 as DNA sequencing

 
 Question: In Sam Format, Clarify The Meaning Of The "0" Flag.
 
 Hello, I have 40,637 short sequences (probes) in a fastq file named "seq.fq".
 
 • First, I mapped them against a reference genome (hg19) using BWA ("bwa aln ...").
 • Then, I converted the alignments from suffix-array coordinates into chromosomal coordinates ("bwa samse ..."), 
   And obtained the results into a SAM file named "seq_aln.sam".
 • Finally, I counted the number of occurrences for each flag
 
 $ grep -v "@" seq_aln.sam | awk -F"\t" 'BEGIN{print "flag\toccurrences"} {a[$2]++} END{for(i in a)print i"\t"a[i]}'
 
   flag......occurrences
 
   4.........3083
   0.........19039
  16.........18515
 
 According to this page, the "4" flag means that the short sequence doesn't map onto the reference genome, 
 and the "16" flag means that the short sequence does map on the reverse strand of the reference genome.
 
 But, what does the "0" flag mean? According to this forum page, it means "the read is not paired and mapped, 
 forward strand", which Is unclear to me... Does it mean "it is not paired but it maps on forward strand"? 
 Or "it is neither paired nor maps on forward strand"? Or "it is neither paired nor maps on any strand"?
 
 At the End, does all this mean that I can work With only 18,515 Short sequences out Of 40,637?
 
 Thanks for your help!
 
 
 Anwser Comments:
 
 When the flag field Is 0, it means none of the bitwise flags specified in the SAM spec (on page 4) are set. 
 That means that your reads with flag 0 are unpaired (because the first flag, 0x1, Is Not set), 
 successfully mapped to the reference (because 0x4 Is Not set) And mapped to the forward strand (because 0x10 Is Not set).
 
 Summarizing your data, the reads With flag 4 are unmapped, the reads With flag 0 are mapped To the forward strand 
 And the reads With flag 16 are mapped To the reverse strand.
 
 </remarks>
</member>
<member name="P:SMRUCC.genomics.SequenceModel.SAM.AlignmentReads.Strand">
 <summary>
 获取当前的这条reads在基因组之上的方向
 </summary>
 <returns></returns>
</member>
<member name="P:SMRUCC.genomics.SequenceModel.SAM.AlignmentReads.RNAME">
 <summary>
 Reference sequence NAME
 
 RNAME: Reference sequence NAME of the alignment. If @SQ header lines are present, RNAME
 (if Not `*') must be present in one of the SQ-SN tag. An unmapped segment without coordinate
 has a `*' at this field. However, an unmapped segment may also have an ordinary coordinate
 such that it can be placed at a desired position after sorting. If RNAME Is `*', no assumptions
 can be made about POS And CIGAR.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:SMRUCC.genomics.SequenceModel.SAM.AlignmentReads.POS">
 <summary>
 1-based leftmost mapping POSition.(本Mapping在参考基因组之中的最左端的位置)
 
 POS: 1-based leftmost mapping POSition of the first matching base. The first base in a reference
 sequence has coordinate 1. POS Is Set As 0 For an unmapped read without coordinate. If POS Is
 0, no assumptions can be made about RNAME And CIGAR.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:SMRUCC.genomics.SequenceModel.SAM.AlignmentReads.MAPQ">
 <summary>
 MAPping Quality
 
 MAPQ: MAPping Quality. It equals -10 log10 Prfmapping position is wrongg, rounded to the
 nearest integer. A value 255 indicates that the mapping quality Is Not available.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:SMRUCC.genomics.SequenceModel.SAM.AlignmentReads.CIGAR">
 <summary>
 CIGAR string
 
 CIGAR: CIGAR string. The CIGAR operations are given in the following table (set `*' if unavailable):
 
  Op  BAM  Description
   M   0   alignment match (can be a sequence match Or mismatch)
   I   1   insertion to the reference
   D   2   deletion from the reference
   N   3   skipped region from the reference
   S   4   soft clipping (clipped sequences present in SEQ)
   H   5   hard clipping (clipped sequences Not present in SEQ)
   P   6   padding (silent deletion from padded reference)
   =   7   sequence match
   X   8   sequence mismatch
 
 H can only be present As the first And/Or last operation.
 S may only have H operations between them And the ends Of the CIGAR String.
 For mRNA -To -genome alignment, an N operation represents an intron. For other types Of alignments, the interpretation of N Is Not defined.
 Sum of lengths of the M/I/S/=/X operations shall equal the length of SEQ.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:SMRUCC.genomics.SequenceModel.SAM.AlignmentReads.RNEXT">
 <summary>
 Ref. name of the mate/next segment.
 
 RNEXT: Reference sequence name of the NEXT segment in the template. For the last segment,
 the next segment Is the first segment in the template. If @SQ header lines are present, RNEXT
 (if Not `*' or `=') must be present in one of the SQ-SN tag. This field is set as `*' when the
 information Is unavailable, And set as `=' if RNEXT is identical RNAME. If not `=' and the next
 segment in the template has one primary mapping (see also bit <see cref="F:SMRUCC.genomics.SequenceModel.SAM.BitFLAGS.Bit0x100">0x100</see> in FLAG), this field Is
 identical to RNAME of the next segment. If the next segment has multiple primary mappings,
 no assumptions can be made about RNEXT And PNEXT. If RNEXT Is `*', no assumptions can
 be made On PNEXT And bit <see cref="F:SMRUCC.genomics.SequenceModel.SAM.BitFLAGS.Bit0x20">0x20</see>.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:SMRUCC.genomics.SequenceModel.SAM.AlignmentReads.PNEXT">
 <summary>
 Position of the mate/next segment
 
 PNEXT: Position of the NEXT segment in the template. Set as 0 when the information is
 unavailable. This field equals POS of the next segment. If PNEXT Is 0, no assumptions can be
 made on RNEXT And bit 0x20.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:SMRUCC.genomics.SequenceModel.SAM.AlignmentReads.TLEN">
 <summary>
 observed Template LENgth
 
 TLEN: signed observed Template LENgth. If all segments are mapped to the same reference, the
 unsigned observed template length equals the number Of bases from the leftmost mapped base
 to the rightmost mapped base. The leftmost segment has a plus sign And the rightmost has a
 minus sign. The sign Of segments In the middle Is undefined. It Is Set As 0 For Single-segment
 template Or when the information Is unavailable.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:SMRUCC.genomics.SequenceModel.SAM.AlignmentReads.QUAL">
 <summary>
 ASCII of Phred-scaled base QUALity+33
 
 QUAL: ASCII of base QUALity plus 33 (same as the quality string in the Sanger FASTQ format).
 A base quality Is the phred-scaled base Error probability which equals -10 log10 Prfbase Is wrongg.
 This field can be a `*' when quality is not stored. If not a `*', SEQ must not be a `*' and the
 length of the quality string ought to equal the length of SEQ.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:SMRUCC.genomics.SequenceModel.SAM.AlignmentReads.OptionalHash">
 <summary>
 最后面的可选的字段数据
 
 可选字段（optional fields)，格式如：TAG:TYPE:VALUE，其中TAG有两个大写字母组成，每个TAG代表一类信息，
 每一行一个TAG只能出现一次，TYPE表示TAG对应值的类型，可以是字符串、整数、字节、数组等。

 要注意的几个概念，以及与之对应的模型
 
  ◾reference
  ◾read
  ◾segment
  ◾template（参考序列和比对上的序列共同组成的序列为template）
  ◾alignment
  ◾seq

 </summary>
 <returns></returns>
</member>
<member name="M:SMRUCC.genomics.SequenceModel.SAM.AlignmentReads.#ctor(System.String)">
 <summary>
 
 </summary>
 <param name="str"></param>
 <remarks>
 不可用的片段信息会使用0或者*来表示
 </remarks>
</member>
<member name="M:SMRUCC.genomics.SequenceModel.SAM.AlignmentReads.RangeAt(System.Int64,System.Int64)">
 <summary>
 查看这个Read是否在该范围之内，由于只是对片段区域内的每一个碱基上面的Reads频数进行计数，所以这里只需要二者只要有重叠就可以了
 </summary>
 <param name="RangeStart"></param>
 <param name="RangeEnds"></param>
 <returns></returns>
</member>
<member name="T:SMRUCC.genomics.SequenceModel.SAM.BitFLAGS">
 <summary>
 Bitwise flags in .bam/.sam files
 </summary>
 <remarks>
 
 Concept: Bitwise flags in .bam/.sam files(如何理解 Bitwise flags 的含义)
 
 Anyone who deals with .sam mapping files has seen the bitwise flag column. It is a single number that can somehow 
 indicate settings for a bunch of different parameters. As per the sam file specifications:
 
  Bit    Description
  0x1    template having multiple segments in sequencing
  0x2    each segment properly aligned according to the aligner
  0x4    segment unmapped
  0x8    next segment in the template unmapped
  0x10   SEQ being reverse complemented
  0x20   SEQ of the next segment in the template being reversed
  0x40   the first segment in the template
  0x80   the last segment in the template
  0x100  secondary alignment
  0x200  Not passing quality controls
  0x400  PCR Or optical duplicate
 
 What does all that mean And how does bitwise flags work? This post will probably go into more detail than you need To For understand bitwise flags.
 
 Radix And numeral systems
 
 Most of the maths we've learned in school are in the decimal system or a base 10 system. In the decimal system, 
 the number 1,324 is equal to: 
 
 1324 = 1 * 103 + 3 * 102 + 2 * 101 + 4 * 100
 
 *remember from your old math classes that 101 = 10 And 100= 1
 
 The base Of a numeral system Is also called a radix. A Decimal system has a radix Of 10.
 
 One of the reasons for a numeral system Is to reduce the amount of unique symbols we have to come up with to represent numbers. 
 It Is important to realize the difference between numbers as an abstract idea And numbers as a physical symbol.
 
 In the decimal system, we have symbols (0-9) representing the numbers zero through nine. Using these ten number symbols (0-9), 
 we can represent any other number, ie the number ten Is the symbol '1' and the symbol '0' together. If we didn't   
 use a number system, we would need a unique symbol for 10, 11, 12, 13.. and so on, resulting in an unmanagable amount of symbols. 
 
 However, there Is an advantage for having more unique symbols to represent numbers; And that Is less amount of symbols 
 would be needed for larger numbers. Imagine if we have a unique symbol for every number up to 100. Instead of writing two   
 symbols in the decimal system for '10', we would only have to write the one unique symbol for ten.
 
 Binary
 
 To understand bitwise flags, we must first understand what binary encoding Is And how it applies to computing. 
 Binary Is a number system with a radix of 2. Only two symbols, 0 And 1 are used to represent numbers. The decimal number, 1324 in   
 binary would be 10100101100
 
 1324 = 1 * 210 + 0 * 29 + 1 * 28 + 0 * 27 + 0 * 26 + 1 * 25 + 0 * 24 + 1 * 23 + 1 * 22 + 0 * 21 + 0 * 20
 
 With only two symbols describing numbers, binary requires a longer String Of symbols To represent larger numbers. 
 So why Do we use only two symbols? Because computers operate Using two states based On the physical hardware. 
 A high voltage state And a low voltage state In Each Of the transistors On a computer processer represents the binary system.
 
 Since computers only work In a binary system, all data would need To be encoded In binary For operations To be performed On it. 
 Each fundamental binary data Of 0 Or 1 Is called a 'bit'. The number 1324 would contain 11 bits.
 
 
 Bitwise flag
 
 Notice how Each flag In the .sam specification has a yes Or no setting. Each flag Is a bit, containg a 0 Or a 1, 
 representing no And yes respectively. If the 5th bit (0x10) Is 1 Then the sequence Is reverse complemented; If it Is 0 than it Is 
 Not reverse complemented. A bitwise flag where only the 5th bit Is Set would have a binary String Of:
 
 binary 10000 = 1 * 24 + 0 * 23 + 0 * 22 + 0 * 21 + 0 * 20 = decimal 16
 
 The '0x10' in the .sam specification flag table is the convention for writing hexadecimal, which has a radix of 16. 
 Hexadecimal of 10 would be decimal 16:
 
 hexadecimal 10 = 1 * 161 + 0 * 160 = decimal 16
 
 
 Summary
 
 The number that you see In the bitwise flag column Of your .sam files can be converted To binary encoding which consists 
 Of series Of 0S And 1S. These 0S And 1S indicate whether the flag In the position Is Set (1), meaning True Or Not Set (0), 
 meaning False. The smallest number possible would be a 0, indicating every flag Not Set. The largest number would be 2047, 
 With a binary String Of '11111111111' indicating every flag set. 
 
 For example, the number 528 in binary would be 1000010000
 
 528 = 1 * 29 + 0 * 28 + 0 * 27 + 0 * 26 + 0 * 25 + 1 * 24 + 0 * 23 + 0 * 22 + 0 * 21 + 0 * 20
 
 The 5th bit (1 * 24) Is set as 1, meaning the read Is reverse complemented. The 10th bit (1 * 29) Is set as 1, meaning the read does Not pass quality controls.
 
 
 Decoding bitwise flag
 
 To decode the bitwise flags in .sam files, you can use this online tool at the picard tools website. 
 Alternatively, to decode in python Or perl, you can use bitwise opeartors. To see whether a bit Is set, 
 you do a 'bitwise AND' operation with the '&amp;' operator. 
 
 For example To check If the 5th bit Is Set, you would check If the flag has a bitwise And With 16 (2^4 power, 
 5th bit Is actually 4th power because numeral systems start With 0th power)
 
 #In python
     If flag &amp; 16
         Return 'negative strand'
     Else
         Return 'positive strand'
 
 #In perl
     If ($flag &amp; 16) { 
         Return 'negative strand';
     } else {
         Return 'positive strand';
     } 
 
 </remarks>
</member>
<member name="F:SMRUCC.genomics.SequenceModel.SAM.BitFLAGS.Bit0x1">
 <summary>
 template having multiple segments in sequencing
 If 0x1 is unset, no assumptions can be made about 0x2, 0x8, 0x20, 0x40 and 0x80.
 (假若1标注没有被设置，则不会进行对2,8,32,64,128的标注进行假设???????)
 </summary>
</member>
<member name="F:SMRUCC.genomics.SequenceModel.SAM.BitFLAGS.Bit0x2">
 <summary>
 Each segment properly aligned according To the aligner
 </summary>
</member>
<member name="F:SMRUCC.genomics.SequenceModel.SAM.BitFLAGS.Bit0x4">
 <summary>
 segment unmapped
 
 Bit 0x4 is the only reliable place to tell whether the segment is unmapped. If 0x4 is set, no
‘’‘ assumptions can be made about RNAME, POS, CIGAR, MAPQ, bits 0x2, 0x10 And 0x100
’‘’ And the bit 0x20 of the next segment in the template.
 </summary>
</member>
<member name="F:SMRUCC.genomics.SequenceModel.SAM.BitFLAGS.Bit0x8">
 <summary>
 Next segment In the template unmapped
 </summary>
</member>
<member name="F:SMRUCC.genomics.SequenceModel.SAM.BitFLAGS.Bit0x10">
 <summary>
 SEQ being reverse complemented
 </summary>
</member>
<member name="F:SMRUCC.genomics.SequenceModel.SAM.BitFLAGS.Bit0x20">
 <summary>
 SEQ Of the Next segment In the template being reversed
 </summary>
</member>
<member name="F:SMRUCC.genomics.SequenceModel.SAM.BitFLAGS.Bit0x40">
 <summary>
 the first segment In the template
 </summary>
</member>
<member name="F:SMRUCC.genomics.SequenceModel.SAM.BitFLAGS.Bit0x80">
 <summary>
 the last segment In the template
 </summary>
</member>
<member name="F:SMRUCC.genomics.SequenceModel.SAM.BitFLAGS.Bit0x100">
 <summary>
 secondary alignment
 
 Bit 0x100 marks the alignment not to be used in certain analyses when the tools in use are
 aware Of this bit.
 (256标注表示这个比对不会被使用于特定的分析之中当工具)
 </summary>
</member>
<member name="F:SMRUCC.genomics.SequenceModel.SAM.BitFLAGS.Bit0x200">
 <summary>
 Not passing quality controls
 </summary>
</member>
<member name="F:SMRUCC.genomics.SequenceModel.SAM.BitFLAGS.Bit0x400">
 <summary>
 PCR Or optical duplicate
 </summary>
</member>
<member name="P:SMRUCC.genomics.SequenceModel.SAM.BitFLAGS_API.BitFLAG">
 <summary>
 标记静态缓存
 </summary>
</member>
<member name="P:SMRUCC.genomics.SequenceModel.SAM.BitFLAGS_API.Descriptions">
 <summary>
 标记描述的静态缓存
 </summary>
</member>
<member name="M:SMRUCC.genomics.SequenceModel.SAM.BitFLAGS_API.ComputeBitFLAGS(System.Int32)">
 <summary>
  Bit    Description
  0x1    template having multiple segments in sequencing
  0x2    each segment properly aligned according to the aligner
  0x4    segment unmapped
  0x8    next segment in the template unmapped
  0x10   SEQ being reverse complemented
  0x20   SEQ of the next segment in the template being reversed
  0x40   the first segment in the template
  0x80   the last segment in the template
  0x100  secondary alignment
  0x200  Not passing quality controls
  0x400  PCR Or optical duplicate
 
 先将数值从十进制转换为2进制，然后再从后面往前面取标记
 </summary>
 <param name="Flag"></param>
 <returns></returns>
 
</member>
<member name="T:SMRUCC.genomics.SequenceModel.SAM.CIGAR_OPERATIONS">
 <summary>
 
 </summary>
</member>
<member name="F:SMRUCC.genomics.SequenceModel.SAM.CIGAR_OPERATIONS.M">
 <summary>
 alignment match (can be a sequence match Or mismatch)
 </summary>
</member>
<member name="F:SMRUCC.genomics.SequenceModel.SAM.CIGAR_OPERATIONS.I">
 <summary>
 insertion To the reference
 </summary>
</member>
<member name="F:SMRUCC.genomics.SequenceModel.SAM.CIGAR_OPERATIONS.D">
 <summary>
 deletion from the reference
 </summary>
</member>
<member name="F:SMRUCC.genomics.SequenceModel.SAM.CIGAR_OPERATIONS.N">
 <summary>
 skipped region from the reference
 
 For mRNA -To -genome alignment, an N operation represents an intron. For other types Of alignments, the interpretation of N Is Not defined.
 </summary>
</member>
<member name="F:SMRUCC.genomics.SequenceModel.SAM.CIGAR_OPERATIONS.S">
 <summary>
 soft clipping (clipped sequences present In SEQ)
 
 S may only have H operations between them And the ends Of the CIGAR String.
 </summary>
</member>
<member name="F:SMRUCC.genomics.SequenceModel.SAM.CIGAR_OPERATIONS.H">
 <summary>
 hard clipping (clipped sequences Not present In SEQ)
 
 H can only be present As the first And/Or last operation.
 </summary>
</member>
<member name="F:SMRUCC.genomics.SequenceModel.SAM.CIGAR_OPERATIONS.P">
 <summary>
 padding (silent deletion from padded reference)
 </summary>
</member>
<member name="F:SMRUCC.genomics.SequenceModel.SAM.CIGAR_OPERATIONS.EQ">
 <summary>
 sequence match
 </summary>
</member>
<member name="F:SMRUCC.genomics.SequenceModel.SAM.CIGAR_OPERATIONS.X">
 <summary>
 sequence mismatch
 </summary>
</member>
<member name="T:SMRUCC.genomics.SequenceModel.SAM.SAMHeader">
 <summary>
 实际上就相当于一个字典来的
 </summary>
</member>
<member name="M:SMRUCC.genomics.SequenceModel.SAM.SAMHeader.#ctor(System.String)">
 <summary>
 
 </summary>
 <param name="str">
 Each header line begins with character `@' followed by a two-letter record type code. In the header,
 each line Is TAB-delimited And except the @CO lines, each data field follows a format `TAG:VALUE'
 where TAG Is a two-letter String that defines the content And the format Of VALUE. Each header line
 should match :  /^@[A-Za-z][A-Za-z](\t[A-Za-z][A-Za-z0-9]:[ -~]+)+$/ Or /^@CO\t.*/. Tags
 containing lowercase letters are reserved For End users.
 (每一行都是从@符号开始，后面跟随者两个字母的数据类型码，使用TAB进行分割除了@CO行，每一个域都以键值对的形式出现:  TAG:Value)
 </param>
</member>
<member name="F:SMRUCC.genomics.SequenceModel.SAM.SAMHeader.TAGS.HD">
 <summary>
 The header line. The first line if present.
 </summary>
 
</member>
<member name="F:SMRUCC.genomics.SequenceModel.SAM.SAMHeader.TAGS.SQ">
 <summary>
 Reference sequence dictionary. The order of @SQ lines defines the alignment sorting order.
 </summary>
 
</member>
<member name="F:SMRUCC.genomics.SequenceModel.SAM.SAMHeader.TAGS.RG">
 <summary>
 Read group. Unordered multiple @RG lines are allowed.
 </summary>
 
</member>
<member name="F:SMRUCC.genomics.SequenceModel.SAM.SAMHeader.TAGS.PG">
 <summary>
 Program.
 </summary>
 
</member>
<member name="F:SMRUCC.genomics.SequenceModel.SAM.SAMHeader.TAGS.CO">
 <summary>
 One-line text comment. Unordered multiple @CO lines are allowed.
 </summary>
 
</member>
<member name="T:SMRUCC.genomics.SequenceModel.SAM.SAM">
 <summary>
 The Sequence Alignment/Map (SAM) format is a generic nucleotide alignment format that describes the alignment of query sequences or sequencing reads to a reference sequence or assembly. 
 Importantly:

 It is flexible enough to store all the alignment information generated by various alignment programs;
 It is simple enough to be easily generated by alignment programs or converted from existing alignment formats;
 It is compact in file size;
 It allows most of the operations on the alignment to work on a stream without loading the whole alignment into memory;
 It allows the file to be indexed by genomic position to efficiently retrieve all reads aligning to a locus.

 SAM is a tab-delimited text format. SAM is a bit slow to parse; so there is a binary equivalent to SAM, called BAM.

 SAM allows optional fields to be stored. In SAM, each alignment must contain a fixed number of mandatory fields that describe 
 the key information about the alignment (such as coordinate detailed alignment and sequences) and may contain a variable 
 number of optional fields which are less important or aligner specific.
 
 SAM is able to store clipped alignments, spliced alignments, multi-part alignments, padded alignments and alignments in colour space. 
 The extended CIGAR string is the key to describing these types of alignments.
 </summary>
 <remarks>
 SAM stands for Sequence Alignment/Map format. It is a TAB-delimited text format consisting of a
 header section, which is optional, and an alignment section. If present, the header must be prior to
 the alignments. Header lines start with `@', while alignment lines do not. Each alignment line has 11
 mandatory fields for essential alignment information such as mapping position, and variable number of 
 optional fields for flexible or aligner specific information.
 
 SAM格式的文件是一种序列比对文件，使用TAB符号进行分隔，文件的格式为一个可选的标题头部区域，标题头部使用@符号起始而比对区域则不需要
 每一行序列比对的数据有11个域用于储存比对信息，诸如：mapping的位置之类
 </remarks>
</member>
<member name="P:SMRUCC.genomics.SequenceModel.SAM.SAM.Head">
 <summary>
 If present, the header must be prior to the alignments. Header lines start With `@', while alignment lines do not.
 (文件的可选头部区域必须要在比对数据区域的前面并且每一行以@符号开始)
 </summary>
</member>
<member name="P:SMRUCC.genomics.SequenceModel.SAM.SAM.AlignmentsReads">
 <summary>
 The object of this value is the details alignment data.
 </summary>
 <returns></returns>
</member>
<member name="M:SMRUCC.genomics.SequenceModel.SAM.SAM.Load(System.String,System.Text.Encoding)">
 <summary>
 从一个文本文件之中加载一个SAM格式的文件数据
 </summary>
 <param name="Path"></param>
 <param name="encoding">Default value is utf8 encoding.</param>
 <returns></returns>
</member>
<member name="M:SMRUCC.genomics.SequenceModel.SAM.SAM.TrimUnmappedReads">
 <summary>
 移除没有被mapping到基因组上面的reads
 </summary>
 <returns></returns>
</member>
<member name="M:SMRUCC.genomics.SequenceModel.SAM.SAM.Assembling(SMRUCC.genomics.SequenceModel.Contig[]@,SMRUCC.genomics.SequenceModel.Contig[]@,System.Boolean)">
 <summary>
 对当前的这个Mapping之中的Reads进行装配
 </summary>
</member>
<member name="M:SMRUCC.genomics.SequenceModel.SAM.SAM.Assembling(System.Collections.Generic.Dictionary{System.Int32,Microsoft.VisualBasic.Language.List{SMRUCC.genomics.SequenceModel.SAM.AlignmentReads}},System.Boolean)">
 <summary>
 
 </summary>
 <param name="Alignment">请注意先按照方向排序</param>
 <param name="Reversed"></param>
 <returns></returns>
</member>
<member name="P:SMRUCC.genomics.SequenceModel.SAM.SamStream.Head">
 <summary>
 If present, the header must be prior to the alignments. Header lines start With `@', while alignment lines do not.
 (文件的可选头部区域必须要在比对数据区域的前面并且每一行以@符号开始)
 </summary>
</member>
<member name="M:SMRUCC.genomics.SequenceModel.SAM.SamStream.#ctor(System.String,System.Text.Encoding)">
 <summary>
 
 </summary>
 <param name="handle">The file path of the *.sam file.</param>
</member>
<member name="M:SMRUCC.genomics.SequenceModel.SAM.SamStream.ReadBlock(System.Int32)">
 <summary>
 调用的时候请不要使用并行化拓展
 </summary>
 <param name="chunkSize"></param>
 <returns></returns>
</member>
<member name="M:SMRUCC.genomics.SequenceModel.SAM.SamStream.__parsingSAMReads(System.String[])">
 <summary>
 由于这个函数是在后台背景线程之中被调用的，所以这里不再使用并行化了，以提高计算效率
 </summary>
 <param name="source"></param>
 <returns></returns>
</member>
<member name="M:SMRUCC.genomics.SequenceModel.SAM_TSSs.SplitSaved(SMRUCC.genomics.SequenceModel.SAM.SAM,System.Boolean,System.String)">
 <summary>
 将SAM文件里面的Reads数据按照正向和反向分别进行保存到两个文件之中
 </summary>
 <returns></returns>
 
</member>
<member name="M:SMRUCC.genomics.SequenceModel.SAM_TSSs.TrimForTSSs(SMRUCC.genomics.SequenceModel.SAM.SAM)">
 <summary>
 将一些标签去除一应用于下游的TSS分析
 </summary>
 <param name="doc">
 会将文档里面的<see cref="F:SMRUCC.genomics.SequenceModel.SAM.BitFLAGS.Bit0x200"/>,
 <see cref="F:SMRUCC.genomics.SequenceModel.SAM.BitFLAGS.Bit0x4"/>的Reads进行剔除
 </param>
 <returns></returns>
 
</member>
<member name="T:SMRUCC.genomics.SequenceModel.SOAP.Read">
 <summary>
 
 </summary>
 <remarks>
 Example line:
 
 ```
 SIMU_0001_00000370/2	ACGTTAACGTTGAGCCAGGCTGGCATGCACGGAAC	hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh	1	b	35	-	refseq	73466	2	C->31G40	G->20T40
 ```
 </remarks>
</member>
</members>
</doc>
