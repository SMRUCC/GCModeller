## RNA-seq analysis with DESeq2
## xie.guigang xie.guigang@gcmodeller.org

# RNA-seq data from GSE52202
# http://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=gse52202. All patients with
# ALS, 4 with C9 expansion ("exp"), 4 controls without expansion ("ctl")





# Import & pre-process ----------------------------------------------------

# Import data from raw featureCounts
countData <- read.csv("{countData.MAT.csv}")

# Remove first columns (geneID)
countData <- countData[ ,2:ncol(countData)]

# Remove .bam or .sam from filenames
colnames(countData) <- gsub("\\.[sb]am$", "", colnames(countData))

# Convert to matrix
countData <- as.matrix(countData)
#head(countData)

##############################################
#  End of data preparing for the countData 
##############################################



# Assign condition (first four are controls, second four contain the expansion)
# condition factors template
# ({conditionName} <- factor(c({factors})))
{WRITE_FACTOR_CONDITIONS}

# Create a coldata frame and instantiate the DESeqDataSet. See ?DESeqDataSetFromMatrix
(colData <- data.frame({FACTOR_LIST}, row.names=c({ColumnNames})))


##############################################
#  End of data preparing for the colData 
##############################################




# Analysis with DESeq2 ----------------------------------------------------

library(DESeq2)

dds <- DESeqDataSetFromMatrix(countData=countData, colData=colData, design={Condition-Design})
dds

# Run the DESeq pipeline
dds <- DESeq(dds)

# Plot dispersions
png("{DIR_EXPORT}/qc-dispersions.png", 1024, 1024, pointsize=20)
plotDispEsts(dds, main="Dispersion plot")
dev.off()


# Get differential expression results
res <- results(dds)
#table(res$padj<0.05)
## Order by adjusted p-value
# res <- res[order(res$padj), ]  # order ???
## Merge with normalized count data
resdata <- merge(as.data.frame(res), as.data.frame(counts(dds, normalized=TRUE)), by="row.names", sort=FALSE)
names(resdata)[1] <- "Gene"
head(resdata)
## Write results
write.csv(resdata, file="{DIR_EXPORT}/diffexpr-results.csv")




# Regularized log transformation for clustering/heatmaps, etc
rld <- rlogTransformation(dds)
head(assay(rld))

png("{DIR_EXPORT}/hist.png", w=1000, h=1000, pointsize=20)
hist(assay(rld))
dev.off()

# Colors for plots below
## Ugly:
## (mycols <- 1:length(unique(condition)))
## Use RColorBrewer, better
library(RColorBrewer)
(mycols <- brewer.pal(8, "Dark2")[1:{ConditionLength}])

# Sample distance heatmap
sampleDists <- as.matrix(dist(t(assay(rld))))
library(gplots)
#png("{DIR_EXPORT}/qc-heatmap-samples.png", w=1000, h=1000, pointsize=20)
#heatmap.2(as.matrix(sampleDists), key=F, trace="none",
#          col=colorpanel(100, "black", "white"),
#          ColSideColors=mycols[condition], RowSideColors=mycols[condition],
#          margin=c(10, 10), main="Sample Distance Matrix")
#dev.off()




# Principal components analysis
## Could do with built-in DESeq2 function:
## DESeq2::plotPCA(rld, intgroup="condition")
## I like mine better:
rld_pca <- function (rld, intgroup = "condition", ntop = 500, colors=NULL, legendpos="bottomleft", main="PCA Biplot", textcx=1, ...) {
  require(genefilter)
  require(calibrate)
  require(RColorBrewer)
  rv = rowVars(assay(rld))
  select = order(rv, decreasing = TRUE)[seq_len(min(ntop, length(rv)))]
  pca = prcomp(t(assay(rld)[select, ]))
  fac = factor(apply(as.data.frame(colData(rld)[, intgroup, drop = FALSE]), 1, paste, collapse = " : "))
  if (is.null(colors)) {
    if (nlevels(fac) >= 3) {
      colors = brewer.pal(nlevels(fac), "Paired")
    }   else {
      colors = c("black", "red")
    }
  }
  pc1var <- round(summary(pca)$importance[2,1]*100, digits=1)
  pc2var <- round(summary(pca)$importance[2,2]*100, digits=1)
  pc1lab <- paste0("PC1 (",as.character(pc1var),"%)")
  pc2lab <- paste0("PC1 (",as.character(pc2var),"%)")
  plot(PC2~PC1, data=as.data.frame(pca$x), bg=colors[fac], pch=21, xlab=pc1lab, ylab=pc2lab, main=main, ...)
  with(as.data.frame(pca$x), textxy(PC1, PC2, labs=rownames(as.data.frame(pca$x)), cex=textcx))
  legend(legendpos, legend=levels(fac), col=colors, pch=20)
  #     rldyplot(PC2 ~ PC1, groups = fac, data = as.data.frame(pca$rld),
  #            pch = 16, cerld = 2, aspect = "iso", col = colours, main = draw.key(key = list(rect = list(col = colours),
  #                                                                                         terldt = list(levels(fac)), rep = FALSE)))
}
#png("{DIR_EXPORT}/qc-pca.png", 1000, 1000, pointsize=20)
#rld_pca(rld, colors=mycols, intgroup="condition", xlim=c(-75, 35))
#dev.off()




## Examine plot of p-values
png("{DIR_EXPORT}/p-values.png", 1000, 1000, pointsize=20)
hist(res$pvalue, breaks=50, col="grey")
dev.off()

## Examine independent filtering
attr(res, "filterThreshold")
png("{DIR_EXPORT}/independent-filtering.png", 1000, 1000, pointsize=20)
plot(attr(res,"filterNumRej"), type="b", xlab="quantiles of baseMean", ylab="number of rejections")
dev.off()

## MA plot
## Could do with built-in DESeq2 function:
## DESeq2::plotMA(dds, ylim=c(-1,1), cex=1)
## I like mine better:
maplot <- function (res, thresh=0.05, labelsig=TRUE, textcx=1, ...) {
  with(res, plot(baseMean, log2FoldChange, pch=20, cex=.5, log="x", ...))
  with(subset(res, padj<thresh), points(baseMean, log2FoldChange, col="red", pch=20, cex=1.5))
  if (labelsig) {
    require(calibrate)
    with(subset(res, padj<thresh), textxy(baseMean, log2FoldChange, labs=Gene, cex=textcx, col=2))
  }
}
png("{DIR_EXPORT}/diffexpr-maplot.png", 1500, 1000, pointsize=20)
maplot(resdata, main="MA Plot")
dev.off()

## Volcano plot with "significant" genes labeled
volcanoplot <- function (res, lfcthresh=2, sigthresh=0.05, main="Volcano Plot", legendpos="bottomright", labelsig=TRUE, textcx=1, ...) {
  with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main=main, ...))
  with(subset(res, padj<sigthresh ), points(log2FoldChange, -log10(pvalue), pch=20, col="red", ...))
  with(subset(res, abs(log2FoldChange)>lfcthresh), points(log2FoldChange, -log10(pvalue), pch=20, col="orange", ...))
  with(subset(res, padj<sigthresh & abs(log2FoldChange)>lfcthresh), points(log2FoldChange, -log10(pvalue), pch=20, col="green", ...))
  if (labelsig) {
    require(calibrate)
    with(subset(res, padj<sigthresh & abs(log2FoldChange)>lfcthresh), textxy(log2FoldChange, -log10(pvalue), labs=Gene, cex=textcx, ...))
  }
  legend(legendpos, xjust=1, yjust=1, legend=c(paste("FDR<",sigthresh,sep=""), paste("|LogFC|>",lfcthresh,sep=""), "both"), pch=20, col=c("red","orange","green"))
}
png("{DIR_EXPORT}/diffexpr-volcanoplot.png", 1200, 1000, pointsize=20)
volcanoplot(resdata, lfcthresh=1, sigthresh=0.05, textcx=.8, xlim=c(-2.3, 2))
dev.off()

