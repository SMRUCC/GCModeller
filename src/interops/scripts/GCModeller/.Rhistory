xmlfile = "D:\biodeep\biodeep_pipeline\biodeepflavor\data\FoodFlavorClusters.XML"
xmlfile = "D:\\biodeep\\biodeep_pipeline\\biodeepflavor\\data\\FoodFlavorClusters.XML"
xmlTree = XML::xmlTreeParse(file = xmlfile);
require(XML)
str(xmlTreeParse)
help("XML")
??XML
xmlTree = XML::xmlParseDoc(file = VisualBasic.R::ReadAllText( xmlfile));
xmlTree = XML::xmlParseDoc(file = VisualBasic.R::ReadAllText( xmlfile));
text =  VisualBasic.R::ReadAllText( xmlfile)
text
XML::xmlTreeParse(file = text)
xmlTree = XML::xmlTreeParse(file = xmlfile);
xmlTree
xmlTree = XML::xmlTreeParse(file = xmlfile);
help(xmlTreeParse)
names(xmlTree)
xmlTree$dtd
str(xmlTree$doc)
length(xmlTree$doc)
names(xmlTree$doc)
names(xmlTree$doc$children)
names(xmlTree$doc$children$background)
names(xmlTree$doc$children$background)
background = xmlTree$doc$children$background;
background
names(background)
length(background)
background[[1]]
background[[1]]
names(background)
background[[1]]
background[[2]]
background[[3]]
background[[4]]
str(background[[4]])
background = background[4:length(background)];
background[[1]]
xmlcl = background[[1]]
xmlcl
str(xmlcl)
names(xmlcl)
xmlcl$names
xmlcl$description
xmlcl
attr(xlcl)
attr(xmlcl)
xmlValue
xmlValue(xmlcl)
xmlAttrs(xmlcl)
info = xmlAttrs(xmlcl);
size = info["size"]
size
size = info[["size"]]
size
xmlcl$members
length(xmlcl$members)
xmlNode(xmlcl$members)
xmlcl$members
xmlcl$members$gene
xmlcl$members
xmlcl
getNodeSet
xmlToList(xmlcl$members)
xmlToList(xmlcl)
xmlToList(xmlcl)$mem
xmlToList(xmlcl)$members
str(xmlToList(xmlcl)$members)
names(xmlToList(xmlcl)$members)
xmlToList(xmlcl)$members
str(xmlToList(xmlcl)$members)
length(xmlToList(xmlcl)$members)
xmlToList(xmlcl)$members[[1]]
xmlToList(xmlcl)$members[[2]]
xmlToList(xmlcl)$members[[3]]
xmlToList(xmlcl)$members[[4]]
xmlToList(xmlcl)$members[[5]]
xmlToList(xmlcl$members)
xmlToList(xmlcl$members[[1]])
xmlToList(xmlcl$members)
xmlToList(xmlcl)
xmlToList(xmlcl)$members
memebers = xmlToList(xmlcl)$members;
members
members = xmlToList(xmlcl)$members;
mmembers
members
members[, 1]
members[, 2]
members[, 3]
members[, 4]
members[, 5]
members[, 6]
i=1
data = members[, i];
data
str(data)
data$alias
names(data)
ls   = names(data);
ls
alias = unlist(data[ls == "alias"]);
alias
alias = as.vector(unlist(data[ls == "alias"]));
alias
term_id = as.vector(unlist(data[ls == "term_id"]));
term_id
data$locus_tag
geneId = data$locus_tag$.attrs[["name"]];
geneId
desc   = data$locus_tag$text;
desc
data$.attrs
library(GCModeller)
bg = ReadFisherCluster(xmlfile)
bg = ReadFisherCluster(file = xmlfile)
bg = ReadFisherCluster(xmlfile)
xmlfile
bg = ReadFisherCluster(xmlfile)
traceback()
data
members
ncol(members)
library(GCModeller)
bg = ReadFisherCluster(xmlfile)
1:0
1:NULL
library(GCModeller)
bg = ReadFisherCluster(xmlfile)
library(GCModeller)
xmlfile
xmlTree    = XML::xmlTreeParse(file = xmlfile);
background = xmlTree$doc$children$background;
background = background[4:length(background)];
background
background = lapply(background, function(cl) {
.read_cluster(xmlcl = cl);
});
cl= background[[1]]
cl
.read_cluster(xmlcl = cl);
library(GCModeller)
.read_cluster(xmlcl = cl);
str(.read_cluster(xmlcl = cl));
str(.read_cluster(xmlcl = cl));
library(GCModeller)
bg = ReadFisherCluster(xmlfile)
i=6
xmlcl = background[[i]]
xmlcl
info = XML::xmlAttrs(xmlcl);
info
size = as.numeric(info[["size"]]);
ID   = info[["ID"]];
members = XML::xmlToList(xmlcl)$members;
members
(is.null(members))
mode(members)
is.data.frame(members)
xmlcl = background[[1]]
info = XML::xmlAttrs(xmlcl);
size = as.numeric(info[["size"]]);
ID   = info[["ID"]];
members = XML::xmlToList(xmlcl)$members;
members
is.data.frame(members)
mode(members)
dim(members)
is.matrix(members)
i = 6
xmlcl = background[[i]]
info = XML::xmlAttrs(xmlcl);
size = as.numeric(info[["size"]]);
ID   = info[["ID"]];
members = XML::xmlToList(xmlcl)$members;
members
names(members)
names(members[[1]])
members = lapply(members, .read_gene);
members
library(GCModeller)
x = ReadFisherCluster(xmlfile)
warnings()
library(GCModeller)
x = ReadFisherCluster(xmlfile)
warnings()
library(GCModeller)
sizeof(x)
background = x
geneSet = readLines("D:\\biodeep\\flavor\\foodb\\Rscript\\visual\\test.txt")
geneSet
n = length(geneSet);
N
N = sizeof(background);
N
n
cluster = background[[1]]
cluster
M = length(cluster$genes);
M
cluster
str(cluster)
geneSet
cluster
cluster$genes
str(cluster$genes)
.intersect = function(cluster, geneSet) {
i = sapply(cluster$genes, function(gene) {
if (gene$geneId %in% geneSet) {
TRUE;
} else if (gene$locus_tag %in% geneSet) {
TRUE;
} else if (any(gene$term_id %in% geneSet)) {
TRUE;
} else {
FALSE;
}
});
sapply(cluster$genes[i], function(gene) gene$locus_tag);
}
klist = .intersect(cluster, geneSet);
klist
.intersect = function(cluster, geneSet) {
i = sapply(cluster$genes, function(gene) {
if (gene$geneId %in% geneSet) {
TRUE;
} else if (gene$locus_tag %in% geneSet) {
TRUE;
} else if (any(gene$term_id %in% geneSet)) {
TRUE;
} else {
FALSE;
}
});
cluster$genes[i] %>%
sapply(., function(gene) gene$locus_tag) %>%
unlist();
}
klist = .intersect(cluster, geneSet);
klist
k = length(klist);
k
n = length(geneSet);
M = length(cluster$genes);
klist = .intersect(cluster, geneSet);
k = length(klist);
Crosstab <- data.frame(
gene.not.interest = c(M-k, ifelse(N-M-n+k < 0, 0, N-M-n+k)),
gene.in.interest  = c(k, n-k)
);
row.names(Crosstab) <- c("In_category", "not_in_category");
Crosstab
F = fisher.test(Crosstab);
F
names(F)
F$estimate
F$null.value
F$conf.int
F$alternative
F
library(GCModeller)
N = sizeof(background);
N
enrich = lapply(background, function(cluster) {
.enrich(cluster, geneSet, N);
});
.enrich = function(cluster, geneSet, N) {
n = length(geneSet);
M = length(cluster$genes);
klist = .intersect(cluster, geneSet);
k = length(klist);
# Crosstable for Fisher test
Crosstab <- data.frame(
gene.not.interest = c(M-k, ifelse(N-M-n+k < 0, 0, N-M-n+k)),
gene.in.interest  = c(k, n-k)
);
row.names(Crosstab) <- c("In_category", "not_in_category");
F = fisher.test(Crosstab);
list(
term_id = cluster$ID,
cluster_size = cluster$size,
hits = klist,
size = k,
p.value = F$p.value
);
}
.intersect = function(cluster, geneSet) {
i = sapply(cluster$genes, function(gene) {
if (gene$geneId %in% geneSet) {
TRUE;
} else if (gene$locus_tag %in% geneSet) {
TRUE;
} else if (any(gene$term_id %in% geneSet)) {
TRUE;
} else {
FALSE;
}
});
cluster$genes[i] %>%
sapply(., function(gene) gene$locus_tag) %>%
unlist();
}
enrich = lapply(background, function(cluster) {
.enrich(cluster, geneSet, N);
});
paste
geneSet
paste(geneSet, collapse = "; ")
library(GCModeller)
Fisher(geneSet, background)
Fisher(geneSet, background)
library(GCModeller)
Fisher(geneSet, background)
x = Fisher(geneSet, background)
write.csv(x, file = "D:/aaaaa.csv")
library(GCModeller)
library(GCModeller)
library(GCModeller)
library(GCModeller)
library(GCModeller)
